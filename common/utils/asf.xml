<asf xmlversion="1.0">
	<select-by-device id="common.utils" caption="Compiler abstraction and code utilities">
		<info type="description" value="summary">
		Compiler abstraction layer and code utilities.  This module
		provides various abstraction layers and utilities to make code
		compatible between different compilers. It also contains
		utilities typically used while pre-processing code.
		</info>
		<module type="driver" id="common.utils#uc3" caption="Compiler abstraction and code utilities - UC3 implementation">
			<info type="gui-flag" value="hidden"/>
			<info type="description" value="summary">
			Compiler abstraction layer and code utilities for
			32-bit AVR. This module provides various abstraction
			layers and utilities to make code compatible between
			different compilers. It also contains utilities
			typically used while pre-processing code.
			</info>
			<device-support value="uc3"/>
			<require idref="avr32.utils"/>
			<build type="doxygen-entry-point" value="group_avr32_utils"/>
		</module>
		<module type="driver" id="common.utils#xmega" caption="Compiler abstraction and code utilities - XMEGA implementation">
			<info type="gui-flag" value="hidden"/>
			<info type="description" value="summary">
			Compiler abstraction layer and code utilities for AVR XMEGA.
			This module provides various abstraction layers
			and utilities to make code compatible between different
			compilers. It also contains utilities typically used
			while pre-processing code.
			</info>
			<device-support value="xmega"/>
			<require idref="xmega.utils"/>
			<build type="doxygen-entry-point" value="group_xmega_utils"/>
		</module>
		<module type="driver" id="common.utils#mega" caption="Compiler abstraction and code utilities - megaAVR and tinyAVR implementation">
			<info type="gui-flag" value="hidden"/>
			<info type="description" value="summary">
			Compiler abstraction layer and code utilities for megaAVR
			and tinyAVR.
			This module provides various abstraction layers
			and utilities to make code compatible between different
			compilers. It also contains utilities typically used
			while pre-processing code.
			</info>
			<device-support value="mega"/>
			<device-support value="tiny"/>
			<require idref="mega.utils"/>
			<build type="doxygen-entry-point" value="group_mega_utils"/>
		</module>
		<module type="driver" id="common.utils#sam" caption="Compiler abstraction and code utilities - SAM3/SAM4 implementation">
			<info type="gui-flag" value="hidden"/>
			<info type="description" value="summary">
			Compiler abstraction layer and code utilities for SAM3/SAM4 products.
			This module provides various abstraction layers
			and utilities to make code compatible between different
			compilers. It also contains utilities typically used
			while pre-processing code.
			</info>
			<device-support value="sam3"/>
			<device-support value="sam4"/>
			<require idref="sam.utils"/>
			<build type="doxygen-entry-point" value="group_sam_utils"/>
		</module>
		<module type="driver" id="common.utils#sam0" caption="Compiler abstraction and code utilities - SAM0+ implementation">
			<info type="gui-flag" value="hidden"/>
			<info type="description" value="summary">
			Compiler abstraction layer and code utilities for SAM0+ products.
			This module provides various abstraction layers
			and utilities to make code compatible between different
			compilers. It also contains utilities typically used
			while pre-processing code.
			</info>
			<device-support value="sam0"/>
			<require idref="sam0.utils"/>
			<build type="doxygen-entry-point" value="group_sam0_utils"/>
		</module>
	</select-by-device>

	<select-by-device id="common.utils.interrupt" caption="Interrupt management (Common API)">
		<info type="description" value="summary">
		Driver for global enabling and disabling of interrupts.
		</info>
		<module type="driver" id="common.utils.interrupt#uc3" caption="Interrupt management - UC3 implementation">
			<info type="description" value="summary">
			Driver for global enabling and disabling of interrupts.
			</info>
			<info type="keyword" value="technology">
				<keyword value="Interrupt"/>
			</info>
			<device-support value="uc3" />
			<build type="include-path" value="." />
			<build type="header-file" subtype="api" value="interrupt.h" />
			<build type="header-file" value="interrupt/interrupt_avr32.h" />
			<build type="doxygen-entry-point" value="interrupt_group"/>
			<require idref="common.utils.interrupt.intc" />
			<require idref="common.utils.interrupt.exception" />
		</module>
		<module type="driver" id="common.utils.interrupt#xmega" caption="Interrupt management - XMEGA implementation">
			<info type="description" value="summary">
			Driver for global enabling and disabling of interrupts.
			</info>
			<info type="keyword" value="technology">
				<keyword value="Interrupt"/>
			</info>
			<device-support value="xmega" />
			<build type="include-path" value="." />
			<build type="header-file" subtype="api" value="interrupt.h" />
			<build type="header-file" value="interrupt/interrupt_avr8.h" />
			<build type="doxygen-entry-point" value="interrupt_group"/>
		</module>
		<module type="driver" id="common.utils.interrupt#mega" caption="Interrupt management - megaAVR and tinyAVR implementation">
			<info type="description" value="summary">
			Driver for global enabling and disabling of interrupts.
			</info>
			<info type="keyword" value="technology">
				<keyword value="Interrupt"/>
			</info>
			<device-support value="mega" />
			<device-support value="tiny" />
			<build type="include-path" value="." />
			<build type="header-file" subtype="api" value="interrupt.h" />
			<build type="header-file" value="interrupt/interrupt_avr8.h" />
			<build type="doxygen-entry-point" value="interrupt_group"/>
		</module>
		<module type="driver" id="common.utils.interrupt#sam_nvic" caption="Interrupt management - SAM implementation">
			<info type="description" value="summary">
			Driver for global enabling and disabling of interrupts.
			</info>
			<device-support value="sam" />
			<device-support value="sam0" />
			<build type="include-path" value="." />
			<build type="header-file" subtype="api" value="interrupt.h" />
			<build type="header-file" value="interrupt/interrupt_sam_nvic.h" />
			<build type="c-source" value="interrupt/interrupt_sam_nvic.c"/>
			<build type="doxygen-entry-point" value="interrupt_group"/>
		</module>
	</select-by-device>

	<select-by-device id="common.utils.unit_test" caption="Unit test framework">
		<info type="description" value="summary">
		Core functions for the unit test framework.
		</info>
		<module type="driver" id="common.utils.unit_test#uc3" caption="Unit test framework - UC3 implementation">
			<info type="description" value="summary">
			Core functions for the unit test framework.
			</info>
			<device-support value="uc3"/>
			<require idref="common.utils.unit_test.generic"/>
			<require idref="avr32.utils"/>
			<build type="doxygen-entry-point" value="test_suite_group"/>
		</module>
		<module type="driver" id="common.utils.unit_test#xmega" caption="Unit test framework - XMEGA implementation">
			<info type="description" value="summary">
			Core functions for the unit test framework.
			</info>
			<device-support value="xmega"/>
			<require idref="common.utils.unit_test.generic"/>
			<require idref="xmega.utils"/>
			<build type="doxygen-entry-point" value="test_suite_group"/>
		</module>
		<module type="driver" id="common.utils.unit_test#sam" caption="Unit test framework - SAM implementation">
			<info type="description" value="summary">
			Core functions for the unit test framework.
			</info>
			<device-support value="sam"/>
			<require idref="common.utils.unit_test.generic"/>
			<require idref="sam.utils"/>
			<build type="doxygen-entry-point" value="test_suite_group"/>
		</module>
	</select-by-device>
	<module type="meta" id="common.utils.unit_test.generic" caption="Generic components of unit test framework">
		<build type="include-path" value="."/>
		<build type="header-file" subtype="api" value="unit_test/suite.h"/>
		<build type="c-source" value="unit_test/suite.c"/>
		<build type="define" name="_ASSERT_ENABLE_" value=""/>
		<build type="define" name="TEST_SUITE_DEFINE_ASSERT_MACRO" value=""/>
		<require idref="common.utils"/>
		<require idref="common.utils.stdio"/>
	</module>

	<!-- TODO: This is a hack to avoid circular dependencies for AVR32GCC. Should remove intc-dependency from interrupt_avr32.h -->
	<select-by-config id="common.utils.interrupt.exception" name="config.avr32.drivers.intc.exception" caption="Exception handlers" default="yes">
		<module type="meta" id="common.utils.interrupt.exception#yes" caption="Exception handlers enabled">
			<info type="description" value="summary">
			Exception handlers for 32-bit AVR devices in use. This
			driver adds routines for handling possible exceptions
			triggered by the CPU.
			</info>
			<build type="asm-source" value="../../avr32/drivers/intc/exception.S" toolchain="avr32gcc"/>
		</module>
		<module type="meta" id="common.utils.interrupt.exception#no" caption="Exception handlers disabled">
			<info type="description" value="summary">
			Exception handlers for 32-bit AVR devices not in use.
			This will cause any generated exceptions to start
			executing invalid code.
			</info>
		</module>
	</select-by-config>

	<!-- TODO: This is a hack to avoid circular dependencies for AVR32GCC. Should remove intc-dependency from interrupt_avr32.h -->
	<select-by-config id="common.utils.interrupt.intc" name="config.utils.interrupt.intc" caption="INTC - Interrupt Controller" default="yes">
		<module type="meta" id="common.utils.interrupt.intc#yes" caption="INTC - Interrupt Controller enabled">
			<info type="description" value="summary">
			INTC collects interrupt requests from the peripherals,
			prioritizes them, and delivers an interrupt request and
			an autovector to the CPU.
			</info>
			<build type="c-source" value="../../avr32/drivers/intc/intc.c" toolchain="avr32gcc" />
			<build type="header-file" value="../../avr32/drivers/intc/intc.h" toolchain="avr32gcc" />
			<build type="include-path" value="../../avr32/drivers/intc/" toolchain="avr32gcc" />
		</module>
		<module type="meta" id="common.utils.interrupt.intc#force" caption="INTC - Force the use of the INTC driver">
			<info type="description" value="summary">
			INTC collects interrupt requests from the peripherals,
			prioritizes them, and delivers an interrupt request and
			an autovector to the CPU.
			</info>
			<build type="c-source" value="../../avr32/drivers/intc/intc.c"/>
			<build type="header-file" value="../../avr32/drivers/intc/intc.h"/>
			<build type="include-path" value="../../avr32/drivers/intc/"/>
			<build type="define" name="CONFIG_INTERRUPT_FORCE_INTC" value="" />
		</module>
		<module type="meta" id="common.utils.interrupt.intc#no" caption="INTC - Interrupt Controller disabled">
			<info type="description" value="summary">
			INTC collects interrupt requests from the peripherals,
			prioritizes them, and delivers an interrupt request and
			an autovector to the CPU.
			</info>
		</module>
	</select-by-config>

	<module type="service" id="common.utils.part_macros" caption="Part identification macros">
		<info type="gui-flag" value="hidden"/>
		<info type="description" value="summary">
		Macros that identify the series and family that the project
		MCU belongs to.
		</info>
		<build type="include-path" value="."/>
		<build type="header-file" subtype="api" value="parts.h"/>
		<build type="doxygen-entry-point" value="part_macros_group"/>
		<device-support value="mega"/>
		<device-support value="tiny"/>
		<device-support value="xmega"/>
		<device-support value="uc3"/>
		<device-support value="sam"/>
		<device-support value="sam0"/>
	</module>
</asf>
